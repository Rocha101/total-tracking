// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  COACH
  CUSTOMER
}

model Account {
  id          String      @id @default(cuid())
  email       String      @unique
  name        String?
  password    String
  accountType AccountType
  protocols   Protocol[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Train {
  id          String     @id @default(cuid())
  name        String
  description String?
  exercises   Exercise[]
  protocol    Protocol   @relation(fields: [protocolId], references: [id])
  protocolId  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Exercise {
  id          String   @id @default(cuid())
  name        String
  description String?
  sets        Int
  reps        Int
  totalTime   Int
  train       Train?   @relation(fields: [trainId], references: [id])
  trainId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Diet {
  id          String   @id @default(cuid())
  name        String
  description String?
  meals       Meal[]
  protocol    Protocol @relation(fields: [protocolId], references: [id])
  protocolId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum MealUnit {
  GR
  ML
  UNIT
}

model Meal {
  id            String   @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  unit          MealUnit
  totalCalories Int
  diet          Diet     @relation(fields: [dietId], references: [id])
  dietId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum HormoneType {
  NINETEEN_NOR
  DHT
  TESTOSTERONE
  PEPTIDE
  INSULIN
  TIREOID
}

enum HormoneUnit {
  MG
  ML
  UI
}

model Hormone {
  id                 String           @id @default(cuid())
  name               String
  description        String?
  quantity           Int
  concentration      Float
  unit               HormoneUnit
  HormoneType        HormoneType
  HormonalProtocol   HormonalProtocol @relation(fields: [hormonalProtocolId], references: [id])
  hormonalProtocolId String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model HormonalProtocol {
  id         String    @id @default(cuid())
  hormones   Hormone[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Protocol   Protocol  @relation(fields: [protocolId], references: [id])
  protocolId String
}

model ExtraCompounds {
  id            String      @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  concentration Float
  unit          HormoneUnit
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Protocol      Protocol    @relation(fields: [protocolId], references: [id])
  protocolId    String
}

model Protocol {
  id                String             @id @default(cuid())
  name              String
  description       String?
  hormonalProtocols HormonalProtocol[]
  trains            Train[]
  diets             Diet[]
  extraCompounds    ExtraCompounds[]
  Account           Account?           @relation(fields: [accountId], references: [id])
  accountId         String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}
